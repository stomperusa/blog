<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Waterfall Graph on exploRations in R</title>
    <link>/tags/waterfall-graph/</link>
    <description>Recent content in Waterfall Graph on exploRations in R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 22 Jun 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/waterfall-graph/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Stacked Waterfall Graphs in R</title>
      <link>/2019/06/22/stacked-waterfall-graphs-in-r/</link>
      <pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/06/22/stacked-waterfall-graphs-in-r/</guid>
      <description>


&lt;div id=&#34;intro&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Intro&lt;/h3&gt;
&lt;p&gt;In an earlier post I provided a template for creating a basic waterfall graph. Here I introduce a slightly more complex version with stacked bars over a time series. I use dplyr, ggplot2 and lubridate libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;stacked-waterfall-graphs&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Stacked Waterfall Graphs&lt;/h3&gt;
&lt;p&gt;This is a version of a waterfall graph I have found useful for showing delivery of commitments over time. The scenario is one where there are multiple groups with monthly deliverables. We want to see progress over time, current state, and timing of future deliverables through to end state or project completion.&lt;/p&gt;
&lt;p&gt;I start by creating several months of mock data based on the current date. Each record is assumed to be one deliverable owned by a Group (G1, G2, G3) and due or already delivered during the Month (spanning two months prior and three months forward for the sake of illustration).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create mock data
month_range &amp;lt;- -2:3
df &amp;lt;- data.frame()

for (r in month_range){

    g1 &amp;lt;- sample(3:8,1)
    g2 &amp;lt;- sample(3:15,1)
    g3 &amp;lt;- sample(3:12,1)

    group &amp;lt;- data.frame(Group = c(rep(&amp;quot;G1&amp;quot;,g1), rep(&amp;quot;G2&amp;quot;, g2), rep(&amp;quot;G3&amp;quot;, g3)))
    month &amp;lt;- data.frame(Month = c(rep(floor_date(today() %m+% months(r), &amp;quot;month&amp;quot;), sum(g1, g2, g3))))
    set &amp;lt;- data.frame(Group = group, Month = month)
    df &amp;lt;- rbind(df, set)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The initial data set should look like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Each record corresponds to a scheduled deliverable
rbind(head(df,5), tail(df,5))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Group      Month
## 1      G1 2019-04-01
## 2      G1 2019-04-01
## 3      G1 2019-04-01
## 4      G1 2019-04-01
## 5      G1 2019-04-01
## 102    G3 2019-09-01
## 103    G3 2019-09-01
## 104    G3 2019-09-01
## 105    G3 2019-09-01
## 106    G3 2019-09-01&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we have such a dataset in this format, the first step toward creating a waterfall graph is to define the starting values in the time series. To do this, I create a new variable Value and set it to -1 for each record. Then I create a new record for each Group that is the inverse of the sum of the Value field for the Group. I set the Month field for these new records to be the month prior to the first delivery month. The sum of the Value column should be zero.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df$Value &amp;lt;- -1

df2 &amp;lt;- df %&amp;gt;% 
    select(Group, Value) %&amp;gt;% 
    group_by(Group) %&amp;gt;% 
    summarise(Value = sum(-Value)) %&amp;gt;% 
    ungroup() %&amp;gt;% 
    mutate(Month = floor_date(min(df$Month) %m+% (months(-1)))) %&amp;gt;%
    select(Group, Month, Value)

df &amp;lt;- rbind(df2,df)

df$Month &amp;lt;- ymd(df$Month)  #This date conversion is necessary for scale_x_date when we go to plot

all.equal(sum(df$Value), 0)   # check that the sum of the values is zero&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data set should now look like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rbind(head(df,5), tail(df,5))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
##    Group Month      Value
##    &amp;lt;fct&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 G1    2019-03-01    26
##  2 G2    2019-03-01    38
##  3 G3    2019-03-01    42
##  4 G1    2019-04-01    -1
##  5 G1    2019-04-01    -1
##  6 G3    2019-09-01    -1
##  7 G3    2019-09-01    -1
##  8 G3    2019-09-01    -1
##  9 G3    2019-09-01    -1
## 10 G3    2019-09-01    -1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we use the approach to generate min and max values I explained in my last post to generate the end and start values for x and y coordinates for each month.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data1 &amp;lt;- df %&amp;gt;% 
    select(Month, Value) %&amp;gt;% 
    group_by(Month) %&amp;gt;% 
    summarise(Value = sum(Value)) %&amp;gt;% 
    ungroup()

data1 &amp;lt;- data1  %&amp;gt;%
    mutate(
        yend = round(cumsum(Value), 3),
        ystart = lag(cumsum(Value), default = 0),
        xstart = c(head(Month, -1), NA),
        xend = c(tail(Month, -1), NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data1 set will look something like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 6
##   Month      Value  yend ystart xstart     xend      
##   &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;    
## 1 2019-03-01   106   106      0 2019-03-01 2019-04-01
## 2 2019-04-01   -12    94    106 2019-04-01 2019-05-01
## 3 2019-05-01   -19    75     94 2019-05-01 2019-06-01
## 4 2019-06-01   -21    54     75 2019-06-01 2019-07-01
## 5 2019-07-01   -15    39     54 2019-07-01 2019-08-01
## 6 2019-08-01   -17    22     39 2019-08-01 2019-09-01
## 7 2019-09-01   -22     0     22 NA         NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we create another data set that captures the start and end values for x and y coordinates for each group per month. Then we join the data1 and data2 sets together by Month.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data2 &amp;lt;- df %&amp;gt;%
    select(Month, Group, Value) %&amp;gt;% 
    group_by(Month, Group) %&amp;gt;% 
    summarise(Value = sum(Value)) %&amp;gt;% 
    ungroup()

data2 &amp;lt;- data2 %&amp;gt;%
    mutate(
       yend2 = cumsum(Value),
       ystart2 = lag(cumsum(Value), default = 0) 
    )

data2 &amp;lt;- data2 %&amp;gt;% 
    left_join(data1, by = &amp;quot;Month&amp;quot;) %&amp;gt;%
    select(-c(&amp;quot;Value.x&amp;quot;, &amp;quot;Value.y&amp;quot;))  # These variables are no longer needed&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The beginning and end of the data2 set will look like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rbind(head(data2,5), tail(data2,5))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 8
##    Month      Group yend2 ystart2  yend ystart xstart     xend      
##    &amp;lt;date&amp;gt;     &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;    
##  1 2019-03-01 G1       26       0   106      0 2019-03-01 2019-04-01
##  2 2019-03-01 G2       64      26   106      0 2019-03-01 2019-04-01
##  3 2019-03-01 G3      106      64   106      0 2019-03-01 2019-04-01
##  4 2019-04-01 G1      100     106    94    106 2019-04-01 2019-05-01
##  5 2019-04-01 G2       97     100    94    106 2019-04-01 2019-05-01
##  6 2019-08-01 G2       30      36    22     39 2019-08-01 2019-09-01
##  7 2019-08-01 G3       22      30    22     39 2019-08-01 2019-09-01
##  8 2019-09-01 G1       18      22     0     22 NA         NA        
##  9 2019-09-01 G2        9      18     0     22 NA         NA        
## 10 2019-09-01 G3        0       9     0     22 NA         NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we are ready to graph. We start with a custom label for the x-axis. The first column that is going to appear on the graph will be the total of all of the deliverables and I will call this “Start Point” instead of giving it a month value. The following columns, the delivery months, I will label with the appropriate month descriptor. Note that because I set the scale of the x-axis to be months, I use +/- a number of days to control the width of the bars when using geom_rect().&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;month_label &amp;lt;- c(&amp;quot;Start Point&amp;quot;, tail(format(as.Date(seq(from = min(data1$Month), to = max(data1$Month), 
                                                          by = &amp;quot;month&amp;quot;)), &amp;quot;%b-%y&amp;quot;), -1))

ggplot(data2) +
    geom_rect(aes(xmin = ymd(Month) - days(12),
                  xmax = ymd(Month) + days(12), ymin = yend2, ymax = ystart2,
                  fill = Group),
              colour = &amp;quot;black&amp;quot;) +
    geom_segment(data = data1[1:(nrow(data1) -1),],aes(x = ymd(xstart),
                                                       xend = ymd(xend),
                                                       y = yend,
                                                       yend = yend)) +
    geom_hline(yintercept = 0, linetype=2) +
    geom_vline(xintercept = floor_date(today(), &amp;quot;month&amp;quot;), linetype=1, colour = &amp;quot;red&amp;quot;, 
               show.legend = TRUE) +
    annotate(&amp;quot;text&amp;quot;, x = floor_date(today(), &amp;quot;month&amp;quot;), y = -3, label = &amp;quot;Current Month&amp;quot;, size = 3) +
    labs(y = &amp;quot;Number of Deliverables&amp;quot;, x = &amp;quot;Delivery Timeframe&amp;quot;, 
         title = &amp;quot;Waterfall Schedule of Deliverables&amp;quot;) +
    scale_x_date(breaks = seq(from = min(data1$Month), to = max(data1$Month), by = &amp;quot;month&amp;quot;), labels = month_label) +
    theme_bw()+
    theme(legend.position = &amp;quot;right&amp;quot;, panel.grid = element_blank(), axis.text.x = element_text(angle = 90, vjust = .5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-06-22-stacked-waterfall-graphs-in-r_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here we have generated a waterfall graph that shows the schedule of monthly deliverables for several groups as stacked bars over a time based x-axis. We start with the full set of deliverables on the left and as we move to the right, show actual deliveries up to the Current Month and the schedule of future deliverables through to completion.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Basic Waterfall Graphs in R</title>
      <link>/2019/05/27/basic-waterfall-graphs-in-r/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/05/27/basic-waterfall-graphs-in-r/</guid>
      <description>


&lt;div id=&#34;intro&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Intro&lt;/h3&gt;
&lt;p&gt;Waterfall graphs are an effective visualization of what could be many increments and decrements that account for the difference between two values. In management information systems, for example, these graphs are often used to represent how an organization uses its budget, or how each product line contributed to total sales. In the following article, I provide a template for how to set up a basic waterfall graph in R with dplyr and ggplot2 libraries.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-waterfall-graphs&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Basic Waterfall Graphs&lt;/h3&gt;
&lt;p&gt;A waterfall graph generally reads from left to right with the starting and ending values represented by vertically drawn bars. Connecting the two bars is a series of incremental or decremental steps sized by the associated values that ultimately sum to the difference between the beginning and ending values.&lt;/p&gt;
&lt;p&gt;We first look at how to structure the data in the example below based on the need to demonstrate a budget reduction from 5 to 4.5 million. You should structure your data such that the first row of data represents the start point, the last row the end point, and those in between are the incremental increases and decreases. You want the sum of the value column to be zero, so you flip the sign on either the starting or the ending value.&lt;/p&gt;
&lt;p&gt;In the example, the first row, “Prev Budget” carries the initial value of 5. The last row, “Current Budget” carries the final value of 4.5 with the sign flipped. The seven rows in between are the incremental increases (if positive) and decreases (if negative). Note the second to the last row I’ve labeled “Gap to Target”, a convention for how to show work is still in progress to get the numbers to align.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- tribble(
    ~Category, ~Value, 
    # --------- header record ----------
    &amp;quot;Prev Budget&amp;quot;, 5,
    &amp;quot;Salaries&amp;quot;, 0.1,
    &amp;quot;CapEx&amp;quot;, 0.175,
    &amp;quot;Travel&amp;quot;, -0.2,
    &amp;quot;Contracting&amp;quot;, -0.1,
    &amp;quot;Operations&amp;quot;, -0.2,
    &amp;quot;RealEstate&amp;quot;, -0.1,
    &amp;quot;Gap to Target&amp;quot;, -0.175,
    &amp;quot;Current Budget&amp;quot;, -4.5
)
df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 2
##   Category        Value
##   &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;
## 1 Prev Budget     5    
## 2 Salaries        0.1  
## 3 CapEx           0.175
## 4 Travel         -0.2  
## 5 Contracting    -0.1  
## 6 Operations     -0.2  
## 7 RealEstate     -0.1  
## 8 Gap to Target  -0.175
## 9 Current Budget -4.5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all.equal(sum(df$Value), 0)   # check that the sum of the values is zero&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we have our data in a format such as this, we can begin to make the data enhancements required to generate the waterfall graph.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;levels &amp;lt;- df$Category

data1 &amp;lt;- df  %&amp;gt;%
    mutate(Category = factor(Category, levels = levels),
        ymin = round(cumsum(Value), 3),
        ymax = lag(cumsum(Value), default = 0),
        xmin = c(head(Category, -1), NA),
        xmax = c(tail(Category, -1), NA),
        Impact = ifelse(Category %in% c(as.character(df$Category[1]), as.character(df$Category[nrow(df)])),&amp;quot;Budget&amp;quot;,
                        ifelse(Value &amp;gt; 0, &amp;quot;Increase&amp;quot;, &amp;quot;Decrease&amp;quot;)
           ))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first step in further preparing the data is to create a variable “levels” that captures the values of the Category field. We will use this below when we change the Category field to a factor, and to set the titles of the columns on the x-axis.&lt;/p&gt;
&lt;p&gt;Next we modify the Category field in the data set to be a factor. The key point here is that factors have integer values associated with them and we will use those values to control the plotting on the x-axis. We use the “level” variable to set the levels of the factor so that we preserve the order. We create min and max values for both x and y coordinates that will be used to plot the bars. Finally, we create what I call the Impact variable which is a classifier to distinguish the two budget columns from the incremental values, and whether the incremental values are increasing or decreasing. Will use the field to determine the color fill for the bars.&lt;/p&gt;
&lt;p&gt;The data set should then look like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 7
##   Category        Value  ymin  ymax  xmin  xmax Impact  
##   &amp;lt;fct&amp;gt;           &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   
## 1 Prev Budget     5      5     0        1     2 Budget  
## 2 Salaries        0.1    5.1   5        2     3 Increase
## 3 CapEx           0.175  5.28  5.1      3     4 Increase
## 4 Travel         -0.2    5.08  5.28     4     5 Decrease
## 5 Contracting    -0.1    4.97  5.08     5     6 Decrease
## 6 Operations     -0.2    4.78  4.97     6     7 Decrease
## 7 RealEstate     -0.1    4.68  4.78     7     8 Decrease
## 8 Gap to Target  -0.175  4.5   4.68     8     9 Decrease
## 9 Current Budget -4.5    0     4.5     NA    NA Budget&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are ready to graph. We start by setting up the theme and label elements.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g &amp;lt;- ggplot(data1) +
        theme_bw()+
        theme(legend.position = &amp;quot;right&amp;quot;, panel.grid = element_blank(), 
            axis.text.x = element_text(angle = 90, vjust = 0.5)) +
        labs(y = &amp;quot;USD Millions&amp;quot;, x = &amp;quot;Expense Category&amp;quot;, title = &amp;quot;Explanation of Budget Gap Closure&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we use geom_rect() to plot the bars. Before doing that, we create a variable ‘w’ that we will use to set the width of the bars. Any positive value less than 1 is acceptable. Values of 1 or greater will run the bars together horizontally. The placement of the bar will be split evenly on either side of the x value designated by the factor value of each column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;w &amp;lt;- 0.4  #use to set width of bars

g &amp;lt;- g +
    geom_rect(aes(xmin = as.integer(Category) - w/2,
                  xmax = as.integer(Category) + w/2, ymin = ymin, ymax = ymax,
                  fill = Impact), colour = &amp;quot;black&amp;quot;) +
    scale_x_discrete(limits = levels) +
    scale_fill_manual(values = (c(&amp;quot;Decrease&amp;quot; = &amp;quot;blue&amp;quot;, &amp;quot;Increase&amp;quot; = &amp;quot;orange&amp;quot;, &amp;quot;Budget&amp;quot; = &amp;quot;black&amp;quot;)))
g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-05-27-basic-waterfall-graphs-in-r_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We have the beginnings of a waterfall chart but it is challenging to visually align the individual bars. This is where the addition of line segments makes a huge difference.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g &amp;lt;- g +
    geom_segment(data = data1[1:(nrow(data1) -1),],aes(x = xmin,
                                                       xend = xmax,
                                                       y = ymin,
                                                       yend = ymin))
g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-05-27-basic-waterfall-graphs-in-r_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Lastly, there is much unnecessary and undesired white space in the middle of this chart driven by the size of the budget values versus the increments. We can zoom in on the important upper section of the graph with the ylim parameter of the coord_cartesian() function. Note we use the coord_cartesian() instead of ylim() to preserve the value bars for the two budget columns which ylim() would otherwise omit as out of range.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g + coord_cartesian(ylim=c(4, max(data1$ymax)+.025)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-05-27-basic-waterfall-graphs-in-r_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here is one last thought on the ordering of the data set. You may want to consider the sort order of the rows that carry the incremental values as they impact the readability of the plot. For example, if there isn’t already a natural order to the data, you may want to show all of the increases first followed by the decreases. This, however, will maximize the height of the y-axis and require the most space to capture the full story. Another way to organize that gives a sense of order to what could otherwise be a tiresome set of up and down steps is to sort descending based on the absolute value of the increment. The eye should see the pattern of diminishing variability as it scans left to right. If you are using a “Gap to Target” field to account for work still in progress to get the numbers to align, you may want to consider filling with another color to make it easier to find on the graph.&lt;/p&gt;
&lt;p&gt;In my next article, I will cover a more complex type of waterfall graph that plots stacked bars over time series data.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>